
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isUserAuthenticated() {
      return request.auth != null;
    }

    // Users Collection
    match /users/{userId} {
      function isOwner() {
        return isUserAuthenticated() && request.auth.uid == userId;
      }

      // Create: Only authenticated users can create their own document (signup)
      allow create: if isOwner();

      // Read (get single document): Owner or Admin
      allow get: if isOwner() || isAdmin();

      // List (query collection): Only Admin
      allow list: if isAdmin();

      // Update: Owner or Admin
      allow update: if isOwner() || isAdmin();

      // Delete: No one by default (define explicitly if needed)
      allow delete: if false;
    }

    // Tool Suggestions Collection
    match /toolSuggestions/{suggestionId} {
      // Allow any authenticated user to create (submit) a suggestion
      allow create: if isUserAuthenticated();

      // Allow only admin to read, update (e.g., status), or delete suggestions
      allow read, update, delete: if isAdmin();
    }

    // Workflow Run Logs Collection
    match /workflowRunLogs/{logId} {
      function isLogOwner() {
        return isUserAuthenticated() && resource.data.userId == request.auth.uid;
      }
      function isCreatingOwnLog() {
        return isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      }

      // Allow authenticated users to create their own logs
      allow create: if isCreatingOwnLog();

      // Allow users to read only their own logs (get single log)
      // For listing their own logs, a query in the app would be filtered by userId,
      // and this rule combined with a 'list' rule for admins would work.
      // Or, we can be more explicit:
      allow get: if isLogOwner() || isAdmin(); // Owner or Admin can get individual log
      allow list: if isAdmin(); // Admin can list all logs. User lists are filtered client-side.
                                // If users need to list their own logs directly via query,
                               // add: `|| (isUserAuthenticated() && request.query.filters.size() > 0 && request.query.filters[0].field == "userId" && request.query.filters[0].value == request.auth.uid)`
                               // For simplicity, we assume user log listing is client-filtered or handled by specific queries validated here.
    }

    // Default deny all other access to prevent accidental exposure
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
